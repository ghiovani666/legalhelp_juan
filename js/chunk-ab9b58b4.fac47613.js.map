{"version":3,"sources":["webpack:///../../../src/components/VFileInput/VFileInput.ts","webpack:///../../../src/components/VTextField/index.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///../../../src/components/VTextarea/VTextarea.ts","webpack:///./src/assets/logo-white.png"],"names":["name","model","prop","event","props","chips","clearable","type","default","counterSizeString","counterString","hideInput","placeholder","prependIcon","readonly","showSize","Boolean","validator","v","includes","smallChips","truncateLength","Number","value","val","computed","classes","computedCounterValue","fileCount","this","isMultiple","lazyValue","$vuetify","lang","t","bytes","internalArrayValue","reduce","size","base","internalValue","get","set","isDirty","length","isLabelActive","$attrs","hasOwnProperty","text","isFocused","map","file","truncatedText","hasChips","watch","handler","immediate","$refs","input","methods","clearableCallback","genChips","small","on","genControl","render","display","genInput","genPrependSlot","icon","genIcon","genSlot","genSelectionText","genSelections","children","$scopedSlots","index","$createElement","staticClass","class","selection","genTextFieldSlot","node","click","onInput","files","e","onKeyDown","truncateText","str","charsKeepOneSide","Math","defaultMenuProps","offsetY","offsetOverflow","transition","VSelect","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","data","lazySearch","selectedIndex","computedItems","selectedValues","selectedItems","item","hasDisplayedItems","hideSelected","filteredItems","some","currentRange","selectedItem","getText","internalSearch","allItems","isAnyValueAllowed","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","document","isMenuActive","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","VTextField","mergeData","attrs","autocomplete","domProps","genInputSlot","slot","hasSlot","onClick","isAppendInner","target","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","delimiters","returnObject","editingIndex","$slots","delimiter","d","genChipSelection","chip","dblclick","onChipInput","onEnterDown","getMenuIndex","selectionStart","toLocaleLowerCase","setValue","updateEditing","updateCombobox","isUsingSlot","updateTags","menuIndex","onPaste","pastedItemText","findExistingIndex","baseMixins","autoGrow","noResize","rowHeight","isNaN","parseFloat","rows","parseInt","noResizeHandle","$nextTick","mounted","setTimeout","calculateInputHeight","height","minHeight","module","exports"],"mappings":"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","file":"js/chunk-ab9b58b4.fac47613.js","sourcesContent":["// Styles\nimport './VFileInput.sass'\n\n// Extensions\nimport VTextField from '../VTextField'\n\n// Components\nimport { VChip } from '../VChip'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n// Utilities\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport { mergeStyles } from '../../util/mergeData'\n\nexport default VTextField.extend({\n  name: 'v-file-input',\n\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    hideInput: Boolean,\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file',\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    } as PropValidator<boolean | 1000 | 1024>,\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22,\n    },\n    type: {\n      type: String,\n      default: 'file',\n    },\n    value: {\n      default: undefined,\n      validator: val => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    } as PropValidator<File | File[]>,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true,\n      }\n    },\n    computedCounterValue (): string {\n      const fileCount = (this.isMultiple && this.lazyValue)\n        ? this.lazyValue.length\n        : (this.lazyValue instanceof File) ? 1 : 0\n\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount)\n\n      const bytes = this.internalArrayValue.reduce((bytes: number, { size = 0 }: File) => {\n        return bytes + size\n      }, 0)\n\n      return this.$vuetify.lang.t(\n        this.counterSizeString,\n        fileCount,\n        humanReadableFileSize(bytes, this.base === 1024)\n      )\n    },\n    internalArrayValue (): File[] {\n      return wrapInArray(this.internalValue)\n    },\n    internalValue: {\n      get (): File[] {\n        return this.lazyValue\n      },\n      set (val: File | File[]) {\n        this.lazyValue = val\n        this.$emit('change', this.lazyValue)\n      },\n    },\n    isDirty (): boolean {\n      return this.internalArrayValue.length > 0\n    },\n    isLabelActive (): boolean {\n      return this.isDirty\n    },\n    isMultiple (): boolean {\n      return this.$attrs.hasOwnProperty('multiple')\n    },\n    text (): string[] {\n      if (!this.isDirty && (this.isFocused || !this.hasLabel)) return [this.placeholder]\n\n      return this.internalArrayValue.map((file: File) => {\n        const {\n          name = '',\n          size = 0,\n        } = file\n\n        const truncatedText = this.truncateText(name)\n\n        return !this.showSize\n          ? truncatedText\n          : `${truncatedText} (${humanReadableFileSize(size, this.base === 1024)})`\n      })\n    },\n    base (): 1000 | 1024 | undefined {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined\n    },\n    hasChips (): boolean {\n      return this.chips || this.smallChips\n    },\n  },\n\n  watch: {\n    readonly: {\n      handler (v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this)\n      },\n      immediate: true,\n    },\n    value (v) {\n      const value = this.isMultiple ? v : v ? [v] : []\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = ''\n      }\n    },\n  },\n\n  methods: {\n    clearableCallback () {\n      this.internalValue = this.isMultiple ? [] : null\n      this.$refs.input.value = ''\n    },\n    genChips () {\n      if (!this.isDirty) return []\n\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: { small: this.smallChips },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue\n            internalValue.splice(index, 1)\n            this.internalValue = internalValue // Trigger the watcher\n          },\n        },\n      }, [text]))\n    },\n    genControl () {\n      const render = VTextField.options.methods.genControl.call(this)\n\n      if (this.hideInput) {\n        render.data!.style = mergeStyles(\n          render.data!.style,\n          { display: 'none' }\n        )\n      }\n\n      return render\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n      delete input.data!.domProps!.value\n\n      // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n      delete input.data!.on!.input\n      input.data!.on!.change = this.onInput\n\n      return [this.genSelections(), input]\n    },\n    genPrependSlot () {\n      if (!this.prependIcon) return null\n\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click()\n      })\n\n      return this.genSlot('prepend', 'outer', [icon])\n    },\n    genSelectionText (): string[] {\n      const length = this.text.length\n\n      if (length < 2) return this.text\n      if (this.showSize && !this.counter) return [this.computedCounterValue]\n      return [this.$vuetify.lang.t(this.counterString, length)]\n    },\n    genSelections () {\n      const children = []\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file: File, index: number) => {\n          if (!this.$scopedSlots.selection) return\n\n          children.push(\n            this.$scopedSlots.selection({\n              text: this.text[index],\n              file,\n              index,\n            })\n          )\n        })\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText())\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection,\n        },\n      }, children)\n    },\n    genTextFieldSlot () {\n      const node = VTextField.options.methods.genTextFieldSlot.call(this)\n\n      node.data!.on = {\n        ...(node.data!.on || {}),\n        click: () => this.$refs.input.click(),\n      }\n\n      return node\n    },\n    onInput (e: Event) {\n      const files = [...(e.target as HTMLInputElement).files || []]\n\n      this.internalValue = this.isMultiple ? files : files[0]\n\n      // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n      this.initialValue = this.internalValue\n    },\n    onKeyDown (e: KeyboardEvent) {\n      this.$emit('keydown', e)\n    },\n    truncateText (str: string) {\n      if (str.length < Number(this.truncateLength)) return str\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2)\n      return `${str.slice(0, charsKeepOneSide)}…${str.slice(str.length - charsKeepOneSide)}`\n    },\n  },\n})\n","import VTextField from './VTextField'\n\nexport { VTextField }\nexport default VTextField\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      value[this.editingIndex] = this.internalSearch\n\n      this.setValue(value)\n\n      this.editingIndex = -1\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.indexOf(this.internalSearch)\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(this.internalSearch)\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n","// Styles\nimport './VTextarea.sass'\n\n// Extensions\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport Vue from 'vue'\n\ninterface options extends Vue {\n  $refs: {\n    input: HTMLTextAreaElement\n  }\n}\n\nconst baseMixins = mixins<options &\n  InstanceType<typeof VTextField>\n>(\n  VTextField\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-textarea',\n\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseInt(v, 10)),\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this),\n      }\n    },\n    noResizeHandle (): boolean {\n      return this.noResize || this.autoGrow\n    },\n  },\n\n  watch: {\n    lazyValue () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n    rowHeight () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n  },\n\n  mounted () {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight()\n    }, 0)\n  },\n\n  methods: {\n    calculateInputHeight () {\n      const input = this.$refs.input\n      if (!input) return\n\n      input.style.height = '0'\n      const height = input.scrollHeight\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight)\n      // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n      input.style.height = Math.max(minHeight, height) + 'px'\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.tag = 'textarea'\n      delete input.data!.attrs!.type\n      input.data!.attrs!.rows = this.rows\n\n      return input\n    },\n    onInput (e: Event) {\n      VTextField.options.methods.onInput.call(this, e)\n      this.autoGrow && this.calculateInputHeight()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation()\n      }\n\n      this.$emit('keydown', e)\n    },\n  },\n})\n","module.exports = __webpack_public_path__ + \"img/logo-white.7ed421f4.png\";"],"sourceRoot":""}